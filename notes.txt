Añadir eslint

-Todas las dependencias relacionadas son de desarrollo.
-Al usar create-next-app nos crea un archivo eslint, lo eliminamos.
-Instalamos eslint.
-Corremos el comando 'npx eslint --init', colocaremos la configuración:
  ...like to use?: Ver sintaxis, problemas y forzar estilo.
  ...type of modules? Según sea el caso, en el nuesto import/export.
  ...framework: Según el caso.
  ...typescript: Según el caso.
  ...where the code run: Ambas en nuestro caso, para ello presionamos 'a'. Sí solo
    ocupamos una, con space.
  ...style for project: popular (gusto del profesor).
  ...style guide: Standar (gusto del profesor).
  ...format config file: JS.
  ...install dependences with npm: Le damos no, porque algunas versiones están
    predefinidas, aun así nos creará el archivo.
-Instalamos esas dependencias (eliminando la version que viene ahí, solo con el 
  nombre).

-Es importante saber que es mala practica tener un formateador por defecto, por
  lo que lo quitamos, debemos tener uno diferente por proyecto.
-Eslnt nos va a formatear el codigo cuando corramos un comando que explicamos ahora,
  pero debemos instalar su plugin.

Comandos:
  -npx eslint .: Nos informa los errores.
  -npx eslint . --fix: Nos soluciona los errores que pueda.
    .Este comando es el que colocaremos en el package, en el script "lint".

-Ahora, el formateo no está siendo el esperado, por lo que creamos un archivo 
  llamado .prettierrc y tendrá por ahorá la configuración del archivo que tenemos
  ahí. Esta configuración se puede añadir al editor entero manualmente con ctrl+,
   así no tener un archivo de configuración, que es lo recomendable.

-Aun hay unos errores, pero están chocando con la utilidad de Next, como tener 
  importado React, para ello, en .eslintrc, podemos sobreescribir reglas, en el
  objeto vacío que está ahí, así que colocamos estas 2 para tener el código completo
  limpio:
    .'react/prop-types': 'off',
    .'react/react-in-jsx-scope': 'off'